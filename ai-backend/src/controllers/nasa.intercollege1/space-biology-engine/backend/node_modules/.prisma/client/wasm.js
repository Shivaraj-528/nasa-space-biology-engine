
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.3
 * Query Engine version: bb420e667c1820a8c05a38023385f6cc7ef8e83a
 */
Prisma.prismaVersion = {
  client: "6.16.3",
  engine: "bb420e667c1820a8c05a38023385f6cc7ef8e83a"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  avatar: 'avatar',
  googleId: 'googleId',
  role: 'role',
  institution: 'institution',
  bio: 'bio',
  verified: 'verified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PublicationScalarFieldEnum = {
  id: 'id',
  title: 'title',
  abstract: 'abstract',
  authors: 'authors',
  keywords: 'keywords',
  doi: 'doi',
  arxivId: 'arxivId',
  pubmedId: 'pubmedId',
  nasaId: 'nasaId',
  crossrefId: 'crossrefId',
  pdfUrl: 'pdfUrl',
  pdfPath: 'pdfPath',
  source: 'source',
  status: 'status',
  publishedAt: 'publishedAt',
  uploadedAt: 'uploadedAt',
  updatedAt: 'updatedAt',
  summary: 'summary',
  keyFindings: 'keyFindings',
  methodology: 'methodology',
  uploadedById: 'uploadedById'
};

exports.Prisma.EmbeddingScalarFieldEnum = {
  id: 'id',
  publicationId: 'publicationId',
  chunkText: 'chunkText',
  embedding: 'embedding',
  chunkIndex: 'chunkIndex',
  createdAt: 'createdAt'
};

exports.Prisma.ChatSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChatMessageScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  role: 'role',
  content: 'content',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.QuizScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  difficulty: 'difficulty',
  publicationId: 'publicationId',
  createdById: 'createdById',
  isPublic: 'isPublic',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QuizQuestionScalarFieldEnum = {
  id: 'id',
  quizId: 'quizId',
  question: 'question',
  options: 'options',
  correctAnswer: 'correctAnswer',
  explanation: 'explanation',
  order: 'order',
  createdAt: 'createdAt'
};

exports.Prisma.QuizAttemptScalarFieldEnum = {
  id: 'id',
  quizId: 'quizId',
  userId: 'userId',
  score: 'score',
  totalQuestions: 'totalQuestions',
  correctAnswers: 'correctAnswers',
  timeSpent: 'timeSpent',
  completedAt: 'completedAt'
};

exports.Prisma.QuizAnswerScalarFieldEnum = {
  id: 'id',
  attemptId: 'attemptId',
  questionId: 'questionId',
  answer: 'answer',
  isCorrect: 'isCorrect',
  timeSpent: 'timeSpent'
};

exports.Prisma.BookmarkScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  publicationId: 'publicationId',
  notes: 'notes',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.UserRole = exports.$Enums.UserRole = {
  STUDENT: 'STUDENT',
  TEACHER: 'TEACHER',
  RESEARCHER: 'RESEARCHER',
  SCIENTIST: 'SCIENTIST'
};

exports.PublicationStatus = exports.$Enums.PublicationStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.QuizDifficulty = exports.$Enums.QuizDifficulty = {
  BEGINNER: 'BEGINNER',
  INTERMEDIATE: 'INTERMEDIATE',
  ADVANCED: 'ADVANCED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Publication: 'Publication',
  Embedding: 'Embedding',
  ChatSession: 'ChatSession',
  ChatMessage: 'ChatMessage',
  Quiz: 'Quiz',
  QuizQuestion: 'QuizQuestion',
  QuizAttempt: 'QuizAttempt',
  QuizAnswer: 'QuizAnswer',
  Bookmark: 'Bookmark'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/Users/yelugodlashivaraj/CascadeProjects/nasa-space-biology-engine/ai-backend/src/controllers/nasa.intercollege1/space-biology-engine/backend/node_modules/@prisma/client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "darwin-arm64",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/Users/yelugodlashivaraj/CascadeProjects/nasa-space-biology-engine/ai-backend/src/controllers/nasa.intercollege1/space-biology-engine/backend/prisma/schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.16.3",
  "engineVersion": "bb420e667c1820a8c05a38023385f6cc7ef8e83a",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "sqlite",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"sqlite\"\n  url      = env(\"DATABASE_URL\")\n}\n\nenum UserRole {\n  STUDENT\n  TEACHER\n  RESEARCHER\n  SCIENTIST\n}\n\nenum PublicationStatus {\n  PENDING\n  APPROVED\n  REJECTED\n}\n\nenum QuizDifficulty {\n  BEGINNER\n  INTERMEDIATE\n  ADVANCED\n}\n\nmodel User {\n  id          String   @id @default(cuid())\n  email       String   @unique\n  name        String\n  avatar      String?\n  googleId    String   @unique\n  role        UserRole @default(STUDENT)\n  institution String?\n  bio         String?\n  verified    Boolean  @default(false)\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n\n  // Relations\n  publications Publication[]\n  quizzes      Quiz[]\n  quizAttempts QuizAttempt[]\n  chatSessions ChatSession[]\n  bookmarks    Bookmark[]\n\n  @@map(\"users\")\n}\n\nmodel Publication {\n  id          String            @id @default(cuid())\n  title       String\n  abstract    String?\n  authors     String // JSON string for SQLite\n  keywords    String // JSON string for SQLite\n  doi         String?\n  arxivId     String?\n  pubmedId    String?\n  nasaId      String?\n  crossrefId  String?\n  pdfUrl      String?\n  pdfPath     String?\n  source      String // NASA, ArXiv, PubMed, CrossRef, Upload\n  status      PublicationStatus @default(PENDING)\n  publishedAt DateTime?\n  uploadedAt  DateTime          @default(now())\n  updatedAt   DateTime          @updatedAt\n\n  // AI-generated content\n  summary     String?\n  keyFindings String? // JSON string for SQLite\n  methodology String?\n\n  // Relations\n  uploadedBy   User?       @relation(fields: [uploadedById], references: [id])\n  uploadedById String?\n  bookmarks    Bookmark[]\n  quizzes      Quiz[]\n  embeddings   Embedding[]\n\n  @@map(\"publications\")\n}\n\nmodel Embedding {\n  id            String   @id @default(cuid())\n  publicationId String\n  chunkText     String\n  embedding     String // JSON string for SQLite\n  chunkIndex    Int\n  createdAt     DateTime @default(now())\n\n  // Relations\n  publication Publication @relation(fields: [publicationId], references: [id], onDelete: Cascade)\n\n  @@map(\"embeddings\")\n}\n\nmodel ChatSession {\n  id        String   @id @default(cuid())\n  userId    String\n  title     String?\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  // Relations\n  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)\n  messages ChatMessage[]\n\n  @@map(\"chat_sessions\")\n}\n\nmodel ChatMessage {\n  id        String   @id @default(cuid())\n  sessionId String\n  role      String // user, assistant, system\n  content   String\n  metadata  Json?\n  createdAt DateTime @default(now())\n\n  // Relations\n  session ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)\n\n  @@map(\"chat_messages\")\n}\n\nmodel Quiz {\n  id            String         @id @default(cuid())\n  title         String\n  description   String?\n  difficulty    QuizDifficulty\n  publicationId String?\n  createdById   String\n  isPublic      Boolean        @default(false)\n  createdAt     DateTime       @default(now())\n  updatedAt     DateTime       @updatedAt\n\n  // Relations\n  publication Publication?   @relation(fields: [publicationId], references: [id])\n  createdBy   User           @relation(fields: [createdById], references: [id])\n  questions   QuizQuestion[]\n  attempts    QuizAttempt[]\n\n  @@map(\"quizzes\")\n}\n\nmodel QuizQuestion {\n  id            String   @id @default(cuid())\n  quizId        String\n  question      String\n  options       String // JSON string for SQLite\n  correctAnswer Int\n  explanation   String?\n  order         Int\n  createdAt     DateTime @default(now())\n\n  // Relations\n  quiz    Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)\n  answers QuizAnswer[]\n\n  @@map(\"quiz_questions\")\n}\n\nmodel QuizAttempt {\n  id             String   @id @default(cuid())\n  quizId         String\n  userId         String\n  score          Float\n  totalQuestions Int\n  correctAnswers Int\n  timeSpent      Int? // in seconds\n  completedAt    DateTime @default(now())\n\n  // Relations\n  quiz    Quiz         @relation(fields: [quizId], references: [id])\n  user    User         @relation(fields: [userId], references: [id])\n  answers QuizAnswer[]\n\n  @@map(\"quiz_attempts\")\n}\n\nmodel QuizAnswer {\n  id         String  @id @default(cuid())\n  attemptId  String\n  questionId String\n  answer     Int\n  isCorrect  Boolean\n  timeSpent  Int? // in seconds\n\n  // Relations\n  attempt  QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)\n  question QuizQuestion @relation(fields: [questionId], references: [id])\n\n  @@map(\"quiz_answers\")\n}\n\nmodel Bookmark {\n  id            String   @id @default(cuid())\n  userId        String\n  publicationId String\n  notes         String?\n  createdAt     DateTime @default(now())\n\n  // Relations\n  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)\n  publication Publication @relation(fields: [publicationId], references: [id], onDelete: Cascade)\n\n  @@unique([userId, publicationId])\n  @@map(\"bookmarks\")\n}\n",
  "inlineSchemaHash": "8180306a64067a99922a929d6d9cb4ff6dcf024d2ec807a06214ded9bc7f7fc3",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"avatar\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"googleId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"UserRole\"},{\"name\":\"institution\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bio\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"verified\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"publications\",\"kind\":\"object\",\"type\":\"Publication\",\"relationName\":\"PublicationToUser\"},{\"name\":\"quizzes\",\"kind\":\"object\",\"type\":\"Quiz\",\"relationName\":\"QuizToUser\"},{\"name\":\"quizAttempts\",\"kind\":\"object\",\"type\":\"QuizAttempt\",\"relationName\":\"QuizAttemptToUser\"},{\"name\":\"chatSessions\",\"kind\":\"object\",\"type\":\"ChatSession\",\"relationName\":\"ChatSessionToUser\"},{\"name\":\"bookmarks\",\"kind\":\"object\",\"type\":\"Bookmark\",\"relationName\":\"BookmarkToUser\"}],\"dbName\":\"users\"},\"Publication\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"abstract\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"authors\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"keywords\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"doi\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"arxivId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"pubmedId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"nasaId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"crossrefId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"pdfUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"pdfPath\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"source\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"PublicationStatus\"},{\"name\":\"publishedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"uploadedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"summary\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"keyFindings\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"methodology\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"uploadedBy\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"PublicationToUser\"},{\"name\":\"uploadedById\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bookmarks\",\"kind\":\"object\",\"type\":\"Bookmark\",\"relationName\":\"BookmarkToPublication\"},{\"name\":\"quizzes\",\"kind\":\"object\",\"type\":\"Quiz\",\"relationName\":\"PublicationToQuiz\"},{\"name\":\"embeddings\",\"kind\":\"object\",\"type\":\"Embedding\",\"relationName\":\"EmbeddingToPublication\"}],\"dbName\":\"publications\"},\"Embedding\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"publicationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"chunkText\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"embedding\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"chunkIndex\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"publication\",\"kind\":\"object\",\"type\":\"Publication\",\"relationName\":\"EmbeddingToPublication\"}],\"dbName\":\"embeddings\"},\"ChatSession\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ChatSessionToUser\"},{\"name\":\"messages\",\"kind\":\"object\",\"type\":\"ChatMessage\",\"relationName\":\"ChatMessageToChatSession\"}],\"dbName\":\"chat_sessions\"},\"ChatMessage\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sessionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"session\",\"kind\":\"object\",\"type\":\"ChatSession\",\"relationName\":\"ChatMessageToChatSession\"}],\"dbName\":\"chat_messages\"},\"Quiz\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"difficulty\",\"kind\":\"enum\",\"type\":\"QuizDifficulty\"},{\"name\":\"publicationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdById\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isPublic\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"publication\",\"kind\":\"object\",\"type\":\"Publication\",\"relationName\":\"PublicationToQuiz\"},{\"name\":\"createdBy\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"QuizToUser\"},{\"name\":\"questions\",\"kind\":\"object\",\"type\":\"QuizQuestion\",\"relationName\":\"QuizToQuizQuestion\"},{\"name\":\"attempts\",\"kind\":\"object\",\"type\":\"QuizAttempt\",\"relationName\":\"QuizToQuizAttempt\"}],\"dbName\":\"quizzes\"},\"QuizQuestion\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"quizId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"question\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"options\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"correctAnswer\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"explanation\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"order\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"quiz\",\"kind\":\"object\",\"type\":\"Quiz\",\"relationName\":\"QuizToQuizQuestion\"},{\"name\":\"answers\",\"kind\":\"object\",\"type\":\"QuizAnswer\",\"relationName\":\"QuizAnswerToQuizQuestion\"}],\"dbName\":\"quiz_questions\"},\"QuizAttempt\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"quizId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"score\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"totalQuestions\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"correctAnswers\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"timeSpent\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"completedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"quiz\",\"kind\":\"object\",\"type\":\"Quiz\",\"relationName\":\"QuizToQuizAttempt\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"QuizAttemptToUser\"},{\"name\":\"answers\",\"kind\":\"object\",\"type\":\"QuizAnswer\",\"relationName\":\"QuizAnswerToQuizAttempt\"}],\"dbName\":\"quiz_attempts\"},\"QuizAnswer\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"attemptId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"questionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"answer\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"isCorrect\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"timeSpent\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"attempt\",\"kind\":\"object\",\"type\":\"QuizAttempt\",\"relationName\":\"QuizAnswerToQuizAttempt\"},{\"name\":\"question\",\"kind\":\"object\",\"type\":\"QuizQuestion\",\"relationName\":\"QuizAnswerToQuizQuestion\"}],\"dbName\":\"quiz_answers\"},\"Bookmark\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"publicationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"notes\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"BookmarkToUser\"},{\"name\":\"publication\",\"kind\":\"object\",\"type\":\"Publication\",\"relationName\":\"BookmarkToPublication\"}],\"dbName\":\"bookmarks\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

